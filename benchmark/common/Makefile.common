################
# Local settings
################
# Compiler
CC ?= gcc

VERSION         ?= O3
ifeq ($(VERSION),DEBUG)
	CFLAGS	+= -g -DDEBUG -O0
endif
ifeq ($(VERSION),SYMBOL)
	CFLAGS	+= -O3 -g
endif
ifeq ($(VERSION),O0)
	CFLAGS	+= -O0
endif
ifeq ($(VERSION),O1)
	CFLAGS	+= -O1
endif
ifeq ($(VERSION),O2)
	CFLAGS	+= -O2
endif
ifeq ($(VERSION),O3)
	CFLAGS	+= -O3
endif

# Compile with compare and echange atomic instruction
	CFLAGS	+= -mcx16
	
# Compile with global lock
ifeq ($(GRANULARITY),GLOBAL_LOCK)
     CFLAGS	+= -DLL_GLOBAL_LOCK
     BIN_SUFFIX = _gl
endif
ifeq ($(G),GL)
     CFLAGS	+= -DLL_GLOBAL_LOCK
     BIN_SUFFIX = _gl
endif

CFLAGS += -D_GNU_SOURCE

ROOT 		?= ../..
BINDIR		?= $(ROOT)/bin
BUILDIR		?= $(ROOT)/build

$(shell [ -d "$(BUILDIR)" ] || mkdir -p $(BUILDIR))
$(shell [ -d "$(BINDIR)" ] || mkdir -p $(BINDIR))

# Path to LIBATOMIC_OPS (or to gcc-specific libatomic_ops)
ifdef LIBAO_HOME
  LIBAO_INC = $(LIBAO_HOME)/include
else
  LIBAO_INC = $(ROOT)/src/atomic_ops
endif

LIBSSMEM = $(ROOT)/external

ifeq ($(LOCK),)
  LOCK          ?= TAS
endif

ifeq ($(CACHE),1)
  SSMEM_SUFFIX=_manual
endif

#############################
# Platform dependent settings
#############################
#
# GCC thread-local storage requires "significant 
# support from the linker (ld), dynamic linker
# (ld.so), and system libraries (libc.so and libpthread.so), so it is
# not available everywhere." source: GCC-doc.
#
# pthread_spinlock is replaced by pthread_mutex 
# on MacOS X, as it might not be supported. 
# Comment LOCK = MUTEX below to enable.

ifndef OS_NAME
    OS_NAME = $(shell uname -s)
endif

ifeq ($(OS_NAME), Darwin)
    OS = MacOS
    DEFINES += -UTLS
    LOCK = MUTEX
endif

ifeq ($(OS_NAME), Linux)
    OS = Linux
    DEFINES += -DTLS
endif

ifeq ($(OS_NAME), SunOS)
    OS = Solaris
    CC = $(SOLARIS_CC1)
    DEFINES += -DTLS
endif

ifndef STM
    CFLAGS += -D$(LOCK)
endif

#################################
# Management PC specific settings
#################################

ifndef PC_NAME
	PC_NAME = $(shell uname -n)
endif

ifeq ($(PC_NAME), excess)
    CORE_NUM ?= $(shell nproc)
	CORE_SPEED_KHz := $(shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq)
    FREQ_GHZ := $(shell echo "scale=3; ${CORE_SPEED_KHz}/1000000" | bc -l)
    OS = Linux
    CFLAGS += -DEXCESS
    PLATFORM_NUMA = 0
	CFLAGS += -DCORE_NUM=${CORE_NUM}
    CFLAGS += -DFREQ_GHZ=${FREQ_GHZ}
	PLATFORM_KNOWN = 1
endif

ifeq ($(PC_NAME), odysseus)
    CORE_NUM ?= $(shell nproc)
	CORE_SPEED_KHz := $(shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq)
    FREQ_GHZ := $(shell echo "scale=3; ${CORE_SPEED_KHz}/1000000" | bc -l)
    OS = Linux
    CFLAGS += -DODYSSEUS
    PLATFORM_NUMA = 0
	CFLAGS += -DCORE_NUM=${CORE_NUM}
    CFLAGS += -DFREQ_GHZ=${FREQ_GHZ}
	PLATFORM_KNOWN = 1
endif

ifeq ($(PC_NAME), ithaca)
    CORE_NUM ?= $(shell nproc)
	CORE_SPEED_KHz := $(shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq)
    FREQ_GHZ := $(shell echo "scale=3; ${CORE_SPEED_KHz}/1000000" | bc -l)
    OS = Linux
    CFLAGS += -DITHACA
    PLATFORM_NUMA = 0
	CFLAGS += -DCORE_NUM=${CORE_NUM}
    CFLAGS += -DFREQ_GHZ=${FREQ_GHZ}
	PLATFORM_KNOWN = 1
endif

ifneq ($(PLATFORM_KNOWN), 1)
    CFLAGS += -DDEFAULT
    PLATFORM_NUMA = 0
    CORE_NUM ?= $(shell nproc)
    CORE_SPEED_KHz := $(shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq)
    FREQ_GHZ := $(shell echo "scale=3; ${CORE_SPEED_KHz}/1000000" | bc -l)
    $(info ********************************** Using as a default number of cores: $(CORE_NUM) on 1 socket)
    $(info ********************************** Using as a default frequency      : $(FREQ_GHZ) GHz)
    $(info ********************************** Using as a compiler               : $(CC))
    $(info ********************************** Using as a machine                : $(PC_NAME))
    $(info ********************************** If incorrect, create a manual entry in common/Makefile.common)
    CFLAGS += -DCORE_NUM=${CORE_NUM}
    CFLAGS += -DFREQ_GHZ=${FREQ_GHZ}
endif

#################################
# Architecture dependent settings
#################################

ifndef ARCH
    ARCH_NAME = $(shell uname -m)
endif

ifeq ($(ARCH_NAME), i386)
    ARCH = x86
    CFLAGS += -m32
    LDFLAGS += -m32
    SSPFD = -lsspfd_x86
    LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_x86$(SSMEM_SUFFIX)
endif

ifeq ($(ARCH_NAME), i686)
    ARCH = x86
    CFLAGS += -m32
    LDFLAGS += -m32
    SSPFD = -lsspfd_x86
    LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_x86$(SSMEM_SUFFIX)
endif

ifeq ($(ARCH_NAME), x86_64)
    ARCH = x86_64
    CFLAGS += -m64
    LDFLAGS += -m64
    SSPFD = -lsspfd_x86_64
	LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_x86_64$(SSMEM_SUFFIX)
endif

ifeq ($(PLATFORM_NUMA), 1)
    LDFLAGS += -lnuma
endif


#################
# Global settings
#################

CFLAGS += -w -Wall
CFLAGS += -fno-strict-aliasing
CFLAGS += -I$(LIBAO_INC) -I$(ROOT)/include -I$(LIBSSMEM)/include

LDFLAGS += -lpthread -lrt -lm

######################
# compilation settings
######################

TEST_FILE = test.c

ifeq ($(GC),0)
	CFLAGS += -DGC=0
else
	CFLAGS += -DGC=1
endif

ifeq ($(INIT),one)
	CFLAGS += -DINITIALIZE_FROM_ONE=1
else
	CFLAGS += -DINITIALIZE_FROM_ONE=0
endif

ifeq ($(SEQ_NO_FREE),1)
	CFLAGS += -DSEQ_SSMEM_NO_FREE=1
endif

ifneq ($(WORKLOAD),)
	CFLAGS += -DWORKLOAD=$(WORKLOAD)
endif

ifneq ($(VALIDATESIZE),)
	CFLAGS += -DVALIDATESIZE=$(VALIDATESIZE)
else
	CFLAGS += -DVALIDATESIZE=1
endif

ifeq ($(SET_CPU),0)
	CFLAGS += -DNO_SET_CPU
else
	ifeq ($(AFFINITY),sparse)
		CFLAGS += -DAFFINITY=2
	endif
	ifeq ($(AFFINITY),dense)
		CFLAGS += -DAFFINITY=1
	endif
	ifeq ($(AFFINITY),none)
		CFLAGS += -DNO_SET_CPU
	endif
endif

ifeq ($(HYPERTHREAD),1)
	CFLAGS += -DHYPERTHREAD=1
endif

ifneq ($(SIDEWORK),)
	CFLAGS += -DSIDEWORK=$(SIDEWORK)
endif

